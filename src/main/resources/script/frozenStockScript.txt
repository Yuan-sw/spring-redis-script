local keys = KEYS
local args = ARGV
-- 创建一个表保存所有的操作
local saleStockOperations = {}
local frozenStockOperations = {}
local incrValue = 0;
-- 返回的库存信息
local data = {}
-- 返回结果
local result = {}

-- 遍历所有的key和对应的值减去可售库存
for i, key in ipairs(keys) do
    local saleStockKey = key .. ':saleStock'
    local frozenStockKey = key .. ':frozenStock'
    local currentResValue = {}
    currentResValue['key'] = key
    if incrValue < 0 then
        -- 任意一个扣减后的值小于0，剩余的就不再做扣减逻辑，只get库存值
        local currentSaleValue = 0;
        local currentFrozenValue = 0;
        local saleValue = redis.call('GET', saleStockKey)
        local frozenValue = redis.call('GET', frozenStockKey)
        if saleValue then 
            currentSaleValue = tonumber(saleValue)
        end
        if frozenValue then 
            currentFrozenValue = tonumber(frozenValue)
        end
        currentResValue['beforeChangeSaleStock'] = currentSaleValue
        currentResValue['changeSaleStock'] = 0
        currentResValue['afterChangeSaleStock'] = currentSaleValue

        currentResValue['beforeChangeFrozenStock'] = currentFrozenValue
        currentResValue['changeFrozenStock'] = 0
        currentResValue['afterChangeFrozenStock'] = currentFrozenValue
        table.insert(data, currentResValue)
    else
        local increment = tonumber(args[i])
        -- 执行扣减可售库存
        local currentSaleValue = redis.call('DECRBY', saleStockKey, increment)
        -- 执行增加冻结库存
        local currentFrozenValue = redis.call('INCRBY', frozenStockKey, increment)
        --incrValue大于等于0的时候，每次都赋值，直到赋值到有负数
        incrValue = currentSaleValue
        -- 将本次操作记录下来
        table.insert(saleStockOperations, {saleStockKey, increment})
        table.insert(frozenStockOperations, {frozenStockKey, increment})
        -- 记录一下当前key的扣减前的可售库存值和冻结库存值
        currentResValue['beforeChangeSaleStock'] = tonumber(currentSaleValue) + increment
        currentResValue['beforeChangeFrozenStock'] = tonumber(currentFrozenValue) - increment
        -- 记录一下当前操作扣改变的库存值和改编后的库存之，改编后如果是负值，就认为没有发生改变，下面的逻辑会回滚
        if currentSaleValue >= 0 then
            currentResValue['changeSaleStock'] = -increment
            currentResValue['afterChangeSaleStock'] = currentSaleValue
            currentResValue['changeFrozenStock'] = increment
            currentResValue['afterChangeFrozenStock'] = currentFrozenValue
        else
            currentResValue['changeSaleStock'] = 0
            currentResValue['afterChangeSaleStock'] = tonumber(currentSaleValue) + increment
            currentResValue['changeFrozenStock'] = 0
            currentResValue['afterChangeFrozenStock'] = tonumber(currentFrozenValue) - increment
        end
        table.insert(data, currentResValue)
    end
end
result['data'] = data

if incrValue < 0 then
    -- 如果有任何一个sku扣减后库存值小于0,则回滚所有已经扣减过的可售库存
    for _, op in ipairs(saleStockOperations) do
        redis.call('INCRBY', op[1], op[2])
    end
    -- 回滚所有加上来的冻结库存
    for _, op in ipairs(frozenStockOperations) do
       redis.call('DECRBY', op[1], op[2])
    end
    result['success'] = false
else
    result['success'] = true
end

-- 所有操作都成功,返回true
return cjson.encode(result)